config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);angular.module("cne").controller("cmeManagerController",cmeManagerController),cmeManagerController.$inject=["$scope","$log","firebaseService","schemaFactory"];function cmeManagerController(e,t,n,r){var o=r.newCME();this.focusrecord="";this.createCME=function(){n.create("array","cmeList",o)}}angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log","$firebaseObject","firebaseFactory"];function landingController(e,t,n,r){var o=firebase.database().ref();this.example=n(o),t.info("in the landing controller")}angular.module("cne").controller("locationsController",locationsController),locationsController.$inject=["$scope","$log"];function locationsController(e,t){t.info("in the locations controller")}angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log"];function loginController(e,t){this.username="",this.password="",this.active={username:!1,password:!1},t.info("in the login controller")}angular.module("cne").controller("createLoginController",createLoginController),createLoginController.$inject=["$scope","$log"];function createLoginController(e,t){t.info("in the login-createLogin controller")}angular.module("cne").controller("forgotPasswordController",forgotPasswordController),forgotPasswordController.$inject=["$scope","$log"];function forgotPasswordController(e,t){t.info("in the login-forgot Password controller")}angular.module("cne").controller("teammemberDashboardController",teammemberDashboardController),teammemberDashboardController.$inject=["$scope","$log"];function teammemberDashboardController(e,t){this.sampleRecords=[{title:"",address:{},frequency:[{lable:"Monthly"},{lable:"Weekly"},{lable:"Every Other Week"}],years:[2017,2018],instances:[1,2,3]}],t.info("in the teammemberDashboard controller")}angular.module("cne").directive("cmeEngagmentsManager",cmeEngagmentsManager);function cmeEngagmentsManager(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeEngagmentsManager.directive.htm",replace:!0,scope:{engagments:"=",addSingle:"&"},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log","firebaseService","schemaFactory"];function n(e,t,n,r){var o=this;o.engagmentsDB=n.read("object","engagmentsCollection"),o.engagmentsList=n.read("array","engagmentsList"),console.log(o.engagmentsDB);o.singleAdd=function(){console.log("adding single"),new Promise(function(e,t){n.create("array","engagmentsList",r.newEngagment()).then(function(t){e(t)}).catch(function(e){t(e)})}).then(function(e){var t=e.path.n[e.path.n.length-1];n=t,o.addSingle({key:n});var n}).catch(function(e){console.log("error",e)})},o.batchAdd=function(){console.log("adding batch")},o.testing=function(){o.addSingle({key:"aoisdoinws"})}}return e}angular.module("cne").directive("cmeIterationsTable",cmeIterationsTable);function cmeIterationsTable(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeIterationsTable.directive.htm",replace:!0,scope:{instances:"=",buildoccurencesfn:"&"},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log"];function n(e,t){var n=this;n.autofill=!0,n.buildoccurencesbutton=function(){console.log("buildoccurencesbutton clicked"),n.buildoccurencesfn()}}return e}angular.module("cne").directive("cmeList",cmeList);function cmeList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeList.directive.htm",replace:!0,scope:{focus:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log","firebaseService"];function n(e,t,n){var r=this;r.cmelist=n.read("array","cmeList"),console.log(r.cmelist),r.focusTrack=function(e){r.focus=e},r.update=function(e,t){r.cmelist.$ref("cme").child(e).child("general").child("title").set(t)}}return e}angular.module("cne").directive("cmeProfileEditor",cmeProfileEditor);function cmeProfileEditor(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeProfileEditor.directive.htm",replace:!0,scope:{focus:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log","firebaseService","schemaFactory"];function n(e,t,n,r){var o=this;o.cmeCollection=n.read("object","cmeObject"),o.update=function(){n.update("object","cmeObject").then(function(e){}).catch(function(e){})},o.addEngagment=function(e){o.cmeCollection.$ref().child(o.focus).child("engagements").child(e).set(r.newEngagment()).then(function(e){console.log("success",e)}).catch(function(e){console.log(e)})}}return e}angular.module("cne").directive("dateBookendPicker",dateBookendPicker);function dateBookendPicker(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/dateBookendPicker.directive.htm",replace:!0,scope:{year:"=",bookend:"=",bkndtype:"=",validatefn:"&"},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log"];function n(e,t){var n=this;n.monthdays=[{text:"January",value:1,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"February",value:2,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]},{text:"March",value:3,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"April",value:4,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"May",value:5,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"June",value:6,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"July",value:7,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"August",value:8,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"September",value:9,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"October",value:10,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"November",value:11,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"December",value:12,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]}],n.activedate={month:"",day:"",wkday:""},n.validations={month:"",day:""};n.validate=function(e,t){var r=!1;isNaN(parseInt(t))?(n.monthdays.forEach(function(e){e.text==t&&(r=!0,n.activedate.month=e.value)}),r||(n.activedate.month="")):n.activedate[e]=parseInt(t),""!=n.year&&""!=n.activedate.month&&""!=n.activedate.day?(function(){var e=new Date(n.year,n.activedate.month-1,n.activedate.day).getDay();n.activedate.wkday=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e]}(),function(){var e=new Date(n.year,n.activedate.month-1,n.activedate.day);console.log("saving the bookend",n.bkndtype),n.bookend=e,n.validatefn({type:n.bkndtype,value:n.bookend})}()):console.log("still missing data")}}return e}angular.module("cne").directive("flavorMixerSizeSelector",flavorMixerSizeSelector);function flavorMixerSizeSelector(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer-size-selector.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log"];function n(e,t){}return e}angular.module("cne").directive("flavorMixer",flavorMixer);function flavorMixer(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log"];function n(e,t){}return e}angular.module("cne").directive("loginPassword",loginPassword);function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log"];function n(e,t){}return e}angular.module("cne").directive("loginUsername",loginUsername);function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log"];function n(e,t){}return e}angular.module("cne").directive("loginValidation",loginValidation);function loginValidation(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-validation.directive.htm",replace:!0,scope:{active:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,r){}n.$inject=["$scope","$log"];function n(e,t){}return e}angular.module("cne").factory("firebaseFactory",firebaseFactory),firebaseFactory.$inject=["$firebase","$firebaseObject","$firebaseArray"];function firebaseFactory(e,t,n){return{ref:firebase.database().ref().child("cme"),getObject:function(){},getArray:function(){}}}angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"];function firebaseService(e,t,n){return{_lists:{cmeList:n(firebase.database().ref().child("cme")),engagmentsList:n(firebase.database().ref().child("engagements"))},_objects:{cmeObject:t(firebase.database().ref().child("cme")),engagmentsCollection:t(firebase.database().ref().child("engagements"))},create:function(e,t,n){var r=this;return new Promise(function(o,a){"object"==e||"array"==e&&r._lists[t].$add(n).then(function(e){o(e)},function(e){a(e)})})},read:function(e,t){{if("object"==e)return this._objects[t];if("array"==e)return this._lists[t]}},update:function(e,t,n){var r=this;return new Promise(function(o,a){"object"==e?r._objects[t].$save().then(function(e){o(e)},function(e){a("error: "+e)}):"array"==e&&r._lists[t].$add(n).then(function(e){o(e)},function(e){a("error: "+e)})})},del:function(){}}}angular.module("cne").factory("schemaFactory",schemaFactory),schemaFactory.$inject=[];function schemaFactory(){return{newEngagment:function(){return{schedule:{arrival:"",salesStart:"",salesEnd:"",departure:""},location:this.newAddress(),shifts:[],status:{value:"",otherDescription:""},type:{selection:"",otherDescription:""}}},newWebSocial:function(){return{type:{selection:"",otherDescription:""},address:""}},newContact:function(){return{name:{first:"",last:""},phone:"",email:"",type:{selection:"",otherDescription:""}}},newAddress:function(){return{type:{selection:"",otherDescription:""},physical:{street01:"",street02:"",street03:"",description:"",city:"",state:"",zip:""}}},newCME:function(){return{general:{title:"",type:{selection:"",otherDescription:""}},address:[this.newAddress()],contacts:{people:[this.newContact()],social:[this.newWebSocial()]},financials:{gross:"",annuals:[],monthly:[]},engagments:""}}}}angular.module("cne").config(config);function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/forgotPassword",{templateUrl:"views/login-forgotPasswordPage.htm",controller:"forgotPasswordController",controllerAs:"vm"}).when("/createLogin",{templateUrl:"views/login-createLoginPage.htm",controller:"createLoginController",controllerAs:"vm"}).when("/find",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shoppingPage.htm",controller:"shoppingController",controllerAs:"vm"}).when("/teamMember/:employeeId",{templateUrl:"views/teammemberDashboard.htm",controller:"teammemberDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).when("/teamMember/cmemanager/:employeeId",{templateUrl:"views/cmemanager.htm",controller:"cmeManagerController",controllerAs:"vm",resolve:{authentication:authentication}}).when("/myAccount/:userId",{templateUrl:"views/customerDashboard.htm",controller:"customerDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).otherwise({redirectTo:"/"})}function authentication(){console.log("authenticating")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
