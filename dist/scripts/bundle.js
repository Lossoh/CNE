config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);angular.module("cne").controller("cmeManagerController",cmeManagerController),cmeManagerController.$inject=["$scope","$log","firebaseService","schemaFactory"];function cmeManagerController(e,t,r,o){var n=o.newCME();this.focusrecord="";this.createCME=function(){r.create("array","cmeList",n)}}angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log","$firebaseObject","firebaseFactory"];function landingController(e,t,r,o){var n=firebase.database().ref();this.example=r(n),t.info("in the landing controller")}angular.module("cne").controller("locationsController",locationsController),locationsController.$inject=["$scope","$log"];function locationsController(e,t){t.info("in the locations controller")}angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log"];function loginController(e,t){this.username="",this.password="",this.active={username:!1,password:!1},t.info("in the login controller")}angular.module("cne").controller("createLoginController",createLoginController),createLoginController.$inject=["$scope","$log"];function createLoginController(e,t){t.info("in the login-createLogin controller")}angular.module("cne").controller("forgotPasswordController",forgotPasswordController),forgotPasswordController.$inject=["$scope","$log"];function forgotPasswordController(e,t){t.info("in the login-forgot Password controller")}angular.module("cne").controller("teammemberDashboardController",teammemberDashboardController),teammemberDashboardController.$inject=["$scope","$log"];function teammemberDashboardController(e,t){this.sampleRecords=[{title:"",address:{},frequency:[{lable:"Monthly"},{lable:"Weekly"},{lable:"Every Other Week"}],years:[2017,2018],instances:[1,2,3]}],t.info("in the teammemberDashboard controller")}angular.module("cne").directive("cmeIterationsTable",cmeIterationsTable);function cmeIterationsTable(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeIterationsTable.directive.htm",replace:!0,scope:{instances:"=",buildoccurencesfn:"&"},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){var r=this;r.autofill=!0,r.buildoccurencesbutton=function(){console.log("buildoccurencesbutton clicked"),r.buildoccurencesfn()}}return e}angular.module("cne").directive("cmeList",cmeList);function cmeList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeList.directive.htm",replace:!0,scope:{focus:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log","firebaseService"];function r(e,t,r){var o=this;o.cmelist=r.read("array","cmeList"),console.log(o.cmelist),o.focusTrack=function(e){o.focus=e},o.update=function(e,t){o.cmelist.$ref("cme").child(e).child("title").set(t)}}return e}angular.module("cne").directive("cmeProfileEditor",cmeProfileEditor);function cmeProfileEditor(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeProfileEditor.directive.htm",replace:!0,scope:{focus:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log","firebaseService"];function r(e,t,r){this.cmeCollection=r.read("object","cmeObject"),this.update=function(){r.update("object","cmeObject").then(function(e){}).catch(function(e){})}}return e}angular.module("cne").directive("dateBookendPicker",dateBookendPicker);function dateBookendPicker(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/dateBookendPicker.directive.htm",replace:!0,scope:{year:"=",bookend:"=",bkndtype:"=",validatefn:"&"},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){var r=this;r.monthdays=[{text:"January",value:1,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"February",value:2,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]},{text:"March",value:3,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"April",value:4,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"May",value:5,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"June",value:6,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"July",value:7,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"August",value:8,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"September",value:9,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"October",value:10,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"November",value:11,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"December",value:12,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]}],r.activedate={month:"",day:"",wkday:""},r.validations={month:"",day:""};r.validate=function(e,t){var o=!1;isNaN(parseInt(t))?(r.monthdays.forEach(function(e){e.text==t&&(o=!0,r.activedate.month=e.value)}),o||(r.activedate.month="")):r.activedate[e]=parseInt(t),""!=r.year&&""!=r.activedate.month&&""!=r.activedate.day?(function(){var e=new Date(r.year,r.activedate.month-1,r.activedate.day).getDay();r.activedate.wkday=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e]}(),function(){var e=new Date(r.year,r.activedate.month-1,r.activedate.day);console.log("saving the bookend",r.bkndtype),r.bookend=e,r.validatefn({type:r.bkndtype,value:r.bookend})}()):console.log("still missing data")}}return e}angular.module("cne").directive("flavorMixerSizeSelector",flavorMixerSizeSelector);function flavorMixerSizeSelector(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer-size-selector.directive.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("flavorMixer",flavorMixer);function flavorMixer(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer.directive.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("loginPassword",loginPassword);function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("loginUsername",loginUsername);function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("loginValidation",loginValidation);function loginValidation(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-validation.directive.htm",replace:!0,scope:{active:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").factory("firebaseFactory",firebaseFactory),firebaseFactory.$inject=["$firebase","$firebaseObject","$firebaseArray"];function firebaseFactory(e,t,r){return{ref:firebase.database().ref().child("cme"),getObject:function(){},getArray:function(){}}}angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"];function firebaseService(e,t,r){return{_lists:{cmeList:r(firebase.database().ref().child("cme"))},_objects:{cmeObject:t(firebase.database().ref().child("cme"))},create:function(e,t,r){var o=this;return new Promise(function(n,l){"object"==e?o._objects[t].$save().then(function(e){n(e)},function(e){l("error: "+e)}):"array"==e&&o._lists[t].$add(r).then(function(e){n(e)},function(e){l("error: "+e)})})},read:function(e,t){{if("object"==e)return this._objects[t];if("array"==e)return this._lists[t]}},update:function(e,t,r){var o=this;return new Promise(function(n,l){"object"==e?o._objects[t].$save().then(function(e){n(e)},function(e){l("error: "+e)}):"array"==e&&o._lists[t].$add(r).then(function(e){n(e)},function(e){l("error: "+e)})})},del:function(){}}}angular.module("cne").factory("schemaFactory",schemaFactory),schemaFactory.$inject=[];function schemaFactory(){return{newCME:function(){return{title:"",type:"",address:{street01:"",street02:"",street03:"",Description:"",city:"",state:"",zip:""},contacts:{manager:{name:"",phone:"",email:""},others:[],email:"",phone:"",web:"",instagram:"",facebook:"",twitter:"",snap:"",pinterest:""},financials:{},occurances:{}}}}}angular.module("cne").config(config);function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/forgotPassword",{templateUrl:"views/login-forgotPasswordPage.htm",controller:"forgotPasswordController",controllerAs:"vm"}).when("/createLogin",{templateUrl:"views/login-createLoginPage.htm",controller:"createLoginController",controllerAs:"vm"}).when("/find",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shoppingPage.htm",controller:"shoppingController",controllerAs:"vm"}).when("/teamMember/:employeeId",{templateUrl:"views/teammemberDashboard.htm",controller:"teammemberDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).when("/teamMember/cmemanager/:employeeId",{templateUrl:"views/cmemanager.htm",controller:"cmeManagerController",controllerAs:"vm",resolve:{authentication:authentication}}).when("/myAccount/:userId",{templateUrl:"views/customerDashboard.htm",controller:"customerDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).otherwise({redirectTo:"/"})}function authentication(){console.log("authenticating")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
