config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);angular.module("cne").controller("cmeManagerController",cmeManagerController),cmeManagerController.$inject=["$scope","$log","firebaseService","schemaFactory"];function cmeManagerController(e,t,r,o){var n=o.newCME();this.focusrecord="";this.createCME=function(){r.create("array","cmeList",n)}}angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log","$firebaseObject","firebaseFactory"];function landingController(e,t,r,o){var n=firebase.database().ref();this.example=r(n),t.info("in the landing controller")}angular.module("cne").controller("locationsController",locationsController),locationsController.$inject=["$scope","$log"];function locationsController(e,t){t.info("in the locations controller")}angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log"];function loginController(e,t){this.username="",this.password="",this.active={username:!1,password:!1},t.info("in the login controller")}angular.module("cne").controller("createLoginController",createLoginController),createLoginController.$inject=["$scope","$log"];function createLoginController(e,t){t.info("in the login-createLogin controller")}angular.module("cne").controller("forgotPasswordController",forgotPasswordController),forgotPasswordController.$inject=["$scope","$log"];function forgotPasswordController(e,t){t.info("in the login-forgot Password controller")}angular.module("cne").controller("teammemberDashboardController",teammemberDashboardController),teammemberDashboardController.$inject=["$scope","$log"];function teammemberDashboardController(e,t){this.sampleRecords=[{title:"",address:{},frequency:[{lable:"Monthly"},{lable:"Weekly"},{lable:"Every Other Week"}],years:[2017,2018],instances:[1,2,3]}],t.info("in the teammemberDashboard controller")}angular.module("cne").directive("cmeIterationsTable",cmeIterationsTable);function cmeIterationsTable(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeIterationsTable.directive.htm",replace:!0,scope:{instances:"=",buildoccurencesfn:"&"},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){var r=this;r.autofill=!0,r.buildoccurencesbutton=function(){console.log("buildoccurencesbutton clicked"),r.buildoccurencesfn()}}return e}angular.module("cne").directive("cmeList",cmeList);function cmeList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeList.directive.htm",replace:!0,scope:{focus:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log","firebaseService"];function r(e,t,r){var o=this;o.cmelist=r.read("array","cmeList"),console.log(o.cmelist),o.focusTrack=function(e){o.focus=e},o.update=function(e,t){o.cmelist.$ref("cme").child(e).child("general").child("title").set(t)}}return e}angular.module("cne").directive("cmeProfileEditor",cmeProfileEditor);function cmeProfileEditor(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeProfileEditor.directive.htm",replace:!0,scope:{focus:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log","firebaseService"];function r(e,t,r){this.cmeCollection=r.read("object","cmeObject"),this.update=function(){r.update("object","cmeObject").then(function(e){}).catch(function(e){})}}return e}angular.module("cne").directive("dateBookendPicker",dateBookendPicker);function dateBookendPicker(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/dateBookendPicker.directive.htm",replace:!0,scope:{year:"=",bookend:"=",bkndtype:"=",validatefn:"&"},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){var r=this;r.monthdays=[{text:"January",value:1,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"February",value:2,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]},{text:"March",value:3,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"April",value:4,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"May",value:5,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"June",value:6,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"July",value:7,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"August",value:8,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"September",value:9,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"October",value:10,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{text:"November",value:11,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{text:"December",value:12,days:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]}],r.activedate={month:"",day:"",wkday:""},r.validations={month:"",day:""};r.validate=function(e,t){var o=!1;isNaN(parseInt(t))?(r.monthdays.forEach(function(e){e.text==t&&(o=!0,r.activedate.month=e.value)}),o||(r.activedate.month="")):r.activedate[e]=parseInt(t),""!=r.year&&""!=r.activedate.month&&""!=r.activedate.day?(function(){var e=new Date(r.year,r.activedate.month-1,r.activedate.day).getDay();r.activedate.wkday=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e]}(),function(){var e=new Date(r.year,r.activedate.month-1,r.activedate.day);console.log("saving the bookend",r.bkndtype),r.bookend=e,r.validatefn({type:r.bkndtype,value:r.bookend})}()):console.log("still missing data")}}return e}angular.module("cne").directive("flavorMixerSizeSelector",flavorMixerSizeSelector);function flavorMixerSizeSelector(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer-size-selector.directive.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("flavorMixer",flavorMixer);function flavorMixer(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer.directive.htm",replace:!0,scope:{},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("loginPassword",loginPassword);function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("loginUsername",loginUsername);function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").directive("loginValidation",loginValidation);function loginValidation(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-validation.directive.htm",replace:!0,scope:{active:"="},link:t,controller:r,controllerAs:"vm",bindToController:!0};function t(e,t,r,o){}r.$inject=["$scope","$log"];function r(e,t){}return e}angular.module("cne").factory("firebaseFactory",firebaseFactory),firebaseFactory.$inject=["$firebase","$firebaseObject","$firebaseArray"];function firebaseFactory(e,t,r){return{ref:firebase.database().ref().child("cme"),getObject:function(){},getArray:function(){}}}angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"];function firebaseService(e,t,r){return{_lists:{cmeList:r(firebase.database().ref().child("cme"))},_objects:{cmeObject:t(firebase.database().ref().child("cme"))},create:function(e,t,r){var o=this;return new Promise(function(n,l){"object"==e?o._objects[t].$save().then(function(e){n(e)},function(e){l("error: "+e)}):"array"==e&&o._lists[t].$add(r).then(function(e){n(e)},function(e){l("error: "+e)})})},read:function(e,t){{if("object"==e)return this._objects[t];if("array"==e)return this._lists[t]}},update:function(e,t,r){var o=this;return new Promise(function(n,l){"object"==e?o._objects[t].$save().then(function(e){n(e)},function(e){l("error: "+e)}):"array"==e&&o._lists[t].$add(r).then(function(e){n(e)},function(e){l("error: "+e)})})},del:function(){}}}angular.module("cne").factory("schemaFactory",schemaFactory),schemaFactory.$inject=[];function schemaFactory(){return{newWebSocial:function(){return{type:{selection:"",otherDescription:""},address:""}},newContact:function(){return{name:{first:"",last:""},phone:"",email:"",type:{selection:"",otherDescription:""}}},newAddress:function(){return{type:{selection:"",otherDescription:""},physical:{street01:"",street02:"",street03:"",description:"",city:"",state:"",zip:""}}},newCME:function(){return{general:{title:"",type:{selection:"",otherDescription:""}},address:[this.newAddress()],contacts:{people:[this.newContact()],social:[this.newWebSocial()]},financials:{gross:"",annuals:[],monthly:[]},occurances:{}}}}}angular.module("cne").config(config);function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/forgotPassword",{templateUrl:"views/login-forgotPasswordPage.htm",controller:"forgotPasswordController",controllerAs:"vm"}).when("/createLogin",{templateUrl:"views/login-createLoginPage.htm",controller:"createLoginController",controllerAs:"vm"}).when("/find",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shoppingPage.htm",controller:"shoppingController",controllerAs:"vm"}).when("/teamMember/:employeeId",{templateUrl:"views/teammemberDashboard.htm",controller:"teammemberDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).when("/teamMember/cmemanager/:employeeId",{templateUrl:"views/cmemanager.htm",controller:"cmeManagerController",controllerAs:"vm",resolve:{authentication:authentication}}).when("/myAccount/:userId",{templateUrl:"views/customerDashboard.htm",controller:"customerDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).otherwise({redirectTo:"/"})}function authentication(){console.log("authenticating")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvd2ViQXBwLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9jbWVNYW5hZ2VyLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xhbmRpbmctY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvbG9jYXRpb25zLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvZ2luLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvZ2luLWNyZWF0ZUxvZ2luLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvZ2luLWZvcmdvdFBhc3N3b3JkLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3RlYW1tZW1iZXJEYXNoYm9hcmQtY29udHJvbGxlci5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jbWVJdGVyYXRpb25zVGFibGUuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NtZUxpc3QuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NtZVByb2ZpbGVFZGl0b3IuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2RhdGVCb29rZW5kUGlja2VyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9mbGF2b3ItbWl4ZXItc2l6ZS1zZWxlY3Rvci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvZmxhdm9yLW1peGVyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sb2dpbi1wYXNzd29yZC5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvbG9naW4tdXNlcm5hbWUuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xvZ2luLXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvZmlyZWJhc2UuZmFjdG9yeS5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL2ZpcmViYXNlLnNlcnZpY2UuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9zY2hlbWEuZmFjdG9yeS5qcyIsInNjcmlwdHMvcm91dGVzL3JvdXRlcy1jb25maWcuanMiXSwibmFtZXMiOlsiYWhOdXRzIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCJjbWVNYW5hZ2VyQ29udHJvbGxlciIsIiRpbmplY3QiLCIkc2NvcGUiLCIkbG9nIiwiZmlyZWJhc2VTZXJ2aWNlIiwic2NoZW1hRmFjdG9yeSIsIm5ld0NNRSIsInRoaXMiLCJmb2N1c3JlY29yZCIsImNyZWF0ZUNNRSIsImNyZWF0ZSIsImxhbmRpbmdDb250cm9sbGVyIiwiJGZpcmViYXNlT2JqZWN0IiwiZmlyZWJhc2VGYWN0b3J5IiwicmVmIiwiZmlyZWJhc2UiLCJkYXRhYmFzZSIsImV4YW1wbGUiLCJpbmZvIiwibG9jYXRpb25zQ29udHJvbGxlciIsImxvZ2luQ29udHJvbGxlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhY3RpdmUiLCJjcmVhdGVMb2dpbkNvbnRyb2xsZXIiLCJmb3Jnb3RQYXNzd29yZENvbnRyb2xsZXIiLCJ0ZWFtbWVtYmVyRGFzaGJvYXJkQ29udHJvbGxlciIsInNhbXBsZVJlY29yZHMiLCJ0aXRsZSIsImFkZHJlc3MiLCJmcmVxdWVuY3kiLCJsYWJsZSIsInllYXJzIiwiaW5zdGFuY2VzIiwiZGlyZWN0aXZlIiwiY21lSXRlcmF0aW9uc1RhYmxlIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCIsInJlcGxhY2UiLCJzY29wZSIsImJ1aWxkb2NjdXJlbmNlc2ZuIiwibGluayIsImxpbmtGdW5jIiwiY21lSXRlcmF0aW9uc1RhYmxlQ29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJlbCIsImF0dHIiLCJjdHJsIiwic2VsZiIsImF1dG9maWxsIiwiYnVpbGRvY2N1cmVuY2VzYnV0dG9uIiwiY29uc29sZSIsImxvZyIsImNtZUxpc3QiLCJmb2N1cyIsImNtZUxpc3RDb250cm9sbGVyIiwiY21lbGlzdCIsInJlYWQiLCJmb2N1c1RyYWNrIiwiaWQiLCJ1cGRhdGUiLCJpbmRleCIsInZhbCIsIiRyZWYiLCJjaGlsZCIsInNldCIsImNtZVByb2ZpbGVFZGl0b3IiLCJjbWVQcm9maWxlRWRpdG9yQ29udHJvbGxlciIsImNtZUNvbGxlY3Rpb24iLCJ0aGVuIiwicyIsImNhdGNoIiwiZSIsImRhdGVCb29rZW5kUGlja2VyIiwieWVhciIsImJvb2tlbmQiLCJia25kdHlwZSIsInZhbGlkYXRlZm4iLCJkYXRlQm9va2VuZFBpY2tlckNvbnRyb2xsZXIiLCJtb250aGRheXMiLCJ0ZXh0IiwidmFsdWUiLCJkYXlzIiwiYWN0aXZlZGF0ZSIsIm1vbnRoIiwiZGF5Iiwid2tkYXkiLCJ2YWxpZGF0aW9ucyIsInZhbGlkYXRlIiwidHlwZSIsImlzVGV4dE1vbnRoIiwiaXNOYU4iLCJwYXJzZUludCIsImZvckVhY2giLCJ3a2RheU51bSIsIkRhdGUiLCJnZXREYXkiLCJ3ZWVrZGF5Q2FsY3VsYXRpb24iLCJjdXJyZW50RGF0ZSIsInNhdmVCb29rZW5kIiwiZmxhdm9yTWl4ZXJTaXplU2VsZWN0b3IiLCJmbGF2b3JNaXhlclNpemVTZWxlY3RvckNvbnRyb2xsZXIiLCJmbGF2b3JNaXhlciIsImZsYXZvck1peGVyQ29udHJvbGxlciIsImxvZ2luUGFzc3dvcmQiLCJsb2dpblBhc3N3b3JkQ29udHJvbGxlciIsImxvZ2luVXNlcm5hbWUiLCJsb2dpblVzZXJuYW1lQ29udHJvbGxlciIsImxvZ2luVmFsaWRhdGlvbiIsImxvZ2luVmFsaWRhdGlvbkNvbnRyb2xsZXIiLCJmYWN0b3J5IiwiJGZpcmViYXNlIiwiJGZpcmViYXNlQXJyYXkiLCJnZXRPYmplY3QiLCJnZXRBcnJheSIsIl9saXN0cyIsIl9vYmplY3RzIiwiY21lT2JqZWN0IiwibmFtZSIsIm5ld0RhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIiRzYXZlIiwiJGFkZCIsImRlbCIsIm5ld1dlYlNvY2lhbCIsInNlbGVjdGlvbiIsIm90aGVyRGVzY3JpcHRpb24iLCJuZXdDb250YWN0IiwiZmlyc3QiLCJsYXN0IiwicGhvbmUiLCJlbWFpbCIsIm5ld0FkZHJlc3MiLCJwaHlzaWNhbCIsInN0cmVldDAxIiwic3RyZWV0MDIiLCJzdHJlZXQwMyIsImRlc2NyaXB0aW9uIiwiY2l0eSIsInN0YXRlIiwiemlwIiwiZ2VuZXJhbCIsImNvbnRhY3RzIiwicGVvcGxlIiwic29jaWFsIiwiZmluYW5jaWFscyIsImdyb3NzIiwiYW5udWFscyIsIm1vbnRobHkiLCJvY2N1cmFuY2VzIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsImhhc2hQcmVmaXgiLCJ3aGVuIiwiYXV0aGVudGljYXRpb24iLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIl0sIm1hcHBpbmdzIjoic0RBQ0EsSUFBQUEsT0FBQUMsUUFBQUMsT0FBQSxPQUFBLFVBQUEsV0FBQSxlQ0RBRCxRQUNBQyxPQUFBLE9BQ0FDLFdBQUEsdUJBQUFDLHNCQUVBQSxxQkFBQUMsU0FBQSxTQUFBLE9BQUEsa0JBQUEsaUJBR0EsU0FBQUQscUJBQUFFLEVBQUFDLEVBQUFDLEVBQUFDLEdBS0EsSUFDQUMsRUFBQUQsRUFBQUMsU0FEQUMsS0FJQUMsWUFBQSxHQUpBRCxLQWdCQUUsVUFBQSxXQUFBTCxFQUFBTSxPQUFBLFFBQUEsVUFBQUosSUM1QkFULFFBQ0FDLE9BQUEsT0FDQUMsV0FBQSxvQkFBQVksbUJBRUFBLGtCQUFBVixTQUFBLFNBQUEsT0FBQSxrQkFBQSxtQkFHQSxTQUFBVSxrQkFBQVQsRUFBQUMsRUFBQVMsRUFBQUMsR0FHQSxJQUNBQyxFQUFBQyxTQUFBQyxXQUFBRixNQURBUCxLQUVBVSxRQUFBTCxFQUFBRSxHQUVBWCxFQUFBZSxLQUFBLDZCQ2RBckIsUUFDQUMsT0FBQSxPQUNBQyxXQUFBLHNCQUFBb0IscUJBRUFBLG9CQUFBbEIsU0FBQSxTQUFBLFFBR0EsU0FBQWtCLG9CQUFBakIsRUFBQUMsR0FLQUEsRUFBQWUsS0FBQSwrQkNaQXJCLFFB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QUFBLEVBQUFDLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLE1BQ0FGLEtBQUEsTUFBQUMsTUFBQSxFQUFBQyxNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLE1BQ0FGLEtBQUEsT0FBQUMsTUFBQSxFQUFBQyxNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxNQUNBRixLQUFBLE9BQUFDLE1BQUEsRUFBQUMsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxNQUNBRixLQUFBLFNBQUFDLE1BQUEsRUFBQUMsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxNQUNBRixLQUFBLFlBQUFDLE1BQUEsRUFBQUMsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsTUFDQUYsS0FBQSxVQUFBQyxNQUFBLEdBQUFDLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsTUFDQUYsS0FBQSxXQUFBQyxNQUFBLEdBQUFDLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLE1BQ0FGLEtBQUEsV0FBQUMsTUFBQSxHQUFBQyxNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLE1BR0FsQyxFQUFBbUMsWUFBQUMsTUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFDQXRDLEVBQUF1QyxhQUNBSCxNQUFBLEdBQ0FDLElBQUEsSUE2QkFyQyxFQUFBd0MsU0FBQSxTQUFBQyxFQUFBUixHQUVBLElBQUFTLEdBQUEsRUFNQUMsTUFBQUMsU0FBQVgsS0FJQWpDLEVBQUErQixVQUFBYyxRQUFBLFNBQUFULEdBQ0FBLEVBQUFK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QSxLQUNBeEgsWUFBQSx3QkFDQXRDLFdBQUEsb0JBQ0E2QyxhQUFBLE9BRUFpSCxLQUFBLFVBQ0F4SCxZQUFBLHNCQUNBdEMsV0FBQSxrQkFDQTZDLGFBQUEsT0FFQWlILEtBQUEsbUJBQ0F4SCxZQUFBLHFDQUNBdEMsV0FBQSwyQkFDQTZDLGFBQUEsT0FFQWlILEtBQUEsZ0JBQ0F4SCxZQUFBLGtDQUNBdEMsV0FBQSx3QkFDQTZDLGFBQUEsT0FFQWlILEtBQUEsU0FDQXhILFlBQUEsMEJBQ0F0QyxXQUFBLHNCQUNBNkMsYUFBQSxPQUVBaUgsS0FBQSxTQUNBeEgsWUFBQSx5QkFDQXRDLFdBQUEscUJBQ0E2QyxhQUFBLE9BSUFpSCxLQUFBLDJCQUNBeEgsWUFBQSxnQ0FDQXRDLFdBQUEsZ0NBQ0E2QyxhQUFBLEtBQ0E4RSxTQUNBb0MsZUFBQUEsa0JBR0FELEtBQUEsc0NBQ0F4SCxZQUFBLHVCQUNBdEMsV0FBQSx1QkFDQTZDLGFBQUEsS0FDQThFLFNBQ0FvQyxlQUFBQSxrQkFHQUQsS0FBQSxzQkFDQXhILFlBQUEsOEJBQ0F0QyxXQUFBLDhCQUNBNkMsYUFBQSxLQUNBOEUsU0FDQW9DLGVBQUFBLGtCQUdBQyxXQUNBQyxXQUFBLE1BUUEsU0FBQUYsaUJBRUExRyxRQUFBQyxJQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1PRFVMRVxudmFyIGFoTnV0cyA9IGFuZ3VsYXIubW9kdWxlKCdjbmUnLCBbJ25nUm91dGUnLCAnZmlyZWJhc2UnLCAnbmdTYW5pdGl6ZSddKTtcbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCdjbWVNYW5hZ2VyQ29udHJvbGxlcicsIGNtZU1hbmFnZXJDb250cm9sbGVyKTtcblxuY21lTWFuYWdlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnZmlyZWJhc2VTZXJ2aWNlJywgJ3NjaGVtYUZhY3RvcnknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjbWVNYW5hZ2VyQ29udHJvbGxlcigkc2NvcGUsICRsb2csIGZpcmViYXNlU2VydmljZSwgc2NoZW1hRmFjdG9yeSkge1xuXG5cdC8vJGxvZy5pbmZvKCdpbiB0aGUgQ01FIE1hbmFnZXIgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgbmV3Q01FID0gc2NoZW1hRmFjdG9yeS5uZXdDTUUoKTtcblx0XG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dm0uZm9jdXNyZWNvcmQgPSBcIlwiO1xuXG5cdC8vREVGSU5FIFBSSVZBVEUgRlVOQ1RJT05TXG5cdGZ1bmN0aW9uIGNyZWF0ZSgpIHt9O1xuXHRmdW5jdGlvbiByZWFkKCkge307XG5cdGZ1bmN0aW9uIHVwZGF0ZSgpIHt9O1xuXHRmdW5jdGlvbiBkZWwoKSB7fTtcblxuXHQvL0RFRklORSBUSEUgVklFVyBNT0RFTCBGVU5DVElPTlNcblx0Lypcblx0Klx0QWRkIGEgbmV3IENNRVxuXHQqL1xuXHR2bS5jcmVhdGVDTUUgPSBmdW5jdGlvbigpIHsgZmlyZWJhc2VTZXJ2aWNlLmNyZWF0ZSgnYXJyYXknLCAnY21lTGlzdCcsIG5ld0NNRSk7IH07XG5cblx0XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2xhbmRpbmdDb250cm9sbGVyJywgbGFuZGluZ0NvbnRyb2xsZXIpO1xuXG5sYW5kaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRmaXJlYmFzZU9iamVjdCcsICdmaXJlYmFzZUZhY3RvcnknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsYW5kaW5nQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRmaXJlYmFzZU9iamVjdCwgZmlyZWJhc2VGYWN0b3J5KSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgcmVmID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKTtcblx0dm0uZXhhbXBsZSA9ICRmaXJlYmFzZU9iamVjdChyZWYpO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGxhbmRpbmcgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cblx0Ly9ydW4gdGhlIHRlc3RcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2xvY2F0aW9uc0NvbnRyb2xsZXInLCBsb2NhdGlvbnNDb250cm9sbGVyKTtcblxubG9jYXRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdFxuXHQkbG9nLmluZm8oJ2luIHRoZSBsb2NhdGlvbnMgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cblx0Ly9ydW4gdGhlIHRlc3RcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsIGxvZ2luQ29udHJvbGxlcik7XG5cbmxvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0udXNlcm5hbWUgPSBcIlwiO1xuXHR2bS5wYXNzd29yZCA9IFwiXCI7XG5cdHZtLmFjdGl2ZSA9IHtcblx0XHR1c2VybmFtZTogZmFsc2UsXG5cdFx0cGFzc3dvcmQ6IGZhbHNlXG5cdH07XG5cdFxuXHQkbG9nLmluZm8oJ2luIHRoZSBsb2dpbiBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXHQvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblxuXHQvL3J1biB0aGUgdGVzdFxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignY3JlYXRlTG9naW5Db250cm9sbGVyJywgY3JlYXRlTG9naW5Db250cm9sbGVyKTtcblxuY3JlYXRlTG9naW5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjcmVhdGVMb2dpbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHRcblx0JGxvZy5pbmZvKCdpbiB0aGUgbG9naW4tY3JlYXRlTG9naW4gY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cblx0Ly9ydW4gdGhlIHRlc3RcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2ZvcmdvdFBhc3N3b3JkQ29udHJvbGxlcicsIGZvcmdvdFBhc3N3b3JkQ29udHJvbGxlcik7XG5cbmZvcmdvdFBhc3N3b3JkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZm9yZ290UGFzc3dvcmRDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0XG5cdCRsb2cuaW5mbygnaW4gdGhlIGxvZ2luLWZvcmdvdCBQYXNzd29yZCBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXHQvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblxuXHQvL3J1biB0aGUgdGVzdFxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcigndGVhbW1lbWJlckRhc2hib2FyZENvbnRyb2xsZXInLCB0ZWFtbWVtYmVyRGFzaGJvYXJkQ29udHJvbGxlcik7XG5cbnRlYW1tZW1iZXJEYXNoYm9hcmRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0ZWFtbWVtYmVyRGFzaGJvYXJkQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLnNhbXBsZVJlY29yZHMgPSBbXG5cdFx0e1xuXHRcdFx0dGl0bGU6XCJcIixcblx0XHRcdGFkZHJlc3M6IHt9LFxuXHRcdFx0ZnJlcXVlbmN5OiBbXG5cdFx0XHRcdHtsYWJsZTogXCJNb250aGx5XCJ9LFxuXHRcdFx0XHR7bGFibGU6IFwiV2Vla2x5XCJ9LFxuXHRcdFx0XHR7bGFibGU6IFwiRXZlcnkgT3RoZXIgV2Vla1wifVxuXHRcdFx0XSxcblx0XHRcdHllYXJzOiBbMjAxNywyMDE4XSxcblx0XHRcdGluc3RhbmNlczogWzEsMiwzXVxuXHRcdH1cblx0XTtcblxuXHQkbG9nLmluZm8oJ2luIHRoZSB0ZWFtbWVtYmVyRGFzaGJvYXJkIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsIi8qXG4qXHRGTEFWT1IgTUlYRVJcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIGFsbG93IGN1c3RvbWVycyB0byBtaXggYW5kIG1hdGNoXG4qXHRvdXIgZGVsaWNpb3VzIGZsYXZvcnMgYW5kIHRvIHBpY2sgdGhpZXIgc2l6aW5nLlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCdjbWVJdGVyYXRpb25zVGFibGUnLCBjbWVJdGVyYXRpb25zVGFibGUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNtZUl0ZXJhdGlvbnNUYWJsZSgpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY21lSXRlcmF0aW9uc1RhYmxlLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGluc3RhbmNlczogXCI9XCIsXG5cdFx0XHRidWlsZG9jY3VyZW5jZXNmbjogXCImXCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNtZUl0ZXJhdGlvbnNUYWJsZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0Y21lSXRlcmF0aW9uc1RhYmxlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gY21lSXRlcmF0aW9uc1RhYmxlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5hdXRvZmlsbCA9IHRydWU7XG5cblx0XHQvL3ZpZXcgbW9kZWwgZnVuY3Rpb25zXG5cdFx0c2VsZi5idWlsZG9jY3VyZW5jZXNidXR0b24gPSBmdW5jdGlvbigpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdidWlsZG9jY3VyZW5jZXNidXR0b24gY2xpY2tlZCcpO1xuXHRcdFx0c2VsZi5idWlsZG9jY3VyZW5jZXNmbigpO1xuXHRcdH07XG5cblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59IiwiLypcbipcdEZMQVZPUiBNSVhFUlxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gYWxsb3cgY3VzdG9tZXJzIHRvIG1peCBhbmQgbWF0Y2hcbipcdG91ciBkZWxpY2lvdXMgZmxhdm9ycyBhbmQgdG8gcGljayB0aGllciBzaXppbmcuXG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2NuZScpXG5cdC5kaXJlY3RpdmUoJ2NtZUxpc3QnLCBjbWVMaXN0KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjbWVMaXN0KCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jbWVMaXN0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGZvY3VzOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY21lTGlzdENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0Y21lTGlzdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnZmlyZWJhc2VTZXJ2aWNlJ107XG5cdFxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gY21lTGlzdENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBmaXJlYmFzZVNlcnZpY2UpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5jbWVsaXN0ID0gZmlyZWJhc2VTZXJ2aWNlLnJlYWQoJ2FycmF5JywnY21lTGlzdCcpO1xuXG5cdFx0Y29uc29sZS5sb2coc2VsZi5jbWVsaXN0KTtcblx0XHQvL0RFRklORSBWSUVXIE1PREVMIEZVTkNUSU9OU1xuXHRcdC8qXG5cdFx0Klx0Rm9jdXMgVHJhY2tcblx0XHQqXHRcblx0XHQqXHRUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIGlkIGFuZCBzaGFyZXMgdGhhdCB2YWx1ZSBvdXRzaWRlIHRoZSBkaXJlY3RpdmUuXG5cdFx0KlxuXHRcdCpcdEBwYXJhbSBpZFxuXHRcdCovXG5cdFx0c2VsZi5mb2N1c1RyYWNrID0gZnVuY3Rpb24oaWQpIHtcblx0XHRcdC8vY29uc29sZS5sb2coJ2ZvY3VzIG9uICcsIGlkKTtcblx0XHRcdHNlbGYuZm9jdXMgPSBpZDtcblx0XHR9O1xuXG5cdFx0Lypcblx0XHQqXHRVcGRhdGVcblx0XHQqXG5cdFx0Klx0VGhpcyBmdW5jdGlvbiB1cGRhdGVzIHZhbHVlcyB0aGF0IGFyZSBjaGFuZ2VkXG5cdFx0KlxuXHRcdCpcdEBwYXJhbSBpbmRleFxuXHRcdCpcdEBwYXJhbSB2YWxcblx0XHQqL1xuXHRcdHNlbGYudXBkYXRlID0gZnVuY3Rpb24oaW5kZXgsIHZhbCkge1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhzZWxmLmNtZWxpc3QsIGluZGV4LCB2YWwpO1xuXHRcdFx0c2VsZi5jbWVsaXN0LiRyZWYoJ2NtZScpLmNoaWxkKGluZGV4KS5jaGlsZCgnZ2VuZXJhbCcpLmNoaWxkKCd0aXRsZScpLnNldCh2YWwpO1xuXHRcdFx0Ly9maXJlYmFzZVNlcnZpY2UudXBkYXRlKCdhcnJheScsKVxuXHRcdH07XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRGTEFWT1IgTUlYRVJcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIGFsbG93IGN1c3RvbWVycyB0byBtaXggYW5kIG1hdGNoXG4qXHRvdXIgZGVsaWNpb3VzIGZsYXZvcnMgYW5kIHRvIHBpY2sgdGhpZXIgc2l6aW5nLlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCdjbWVQcm9maWxlRWRpdG9yJywgY21lUHJvZmlsZUVkaXRvcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY21lUHJvZmlsZUVkaXRvcigpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY21lUHJvZmlsZUVkaXRvci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRmb2N1czogJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjbWVQcm9maWxlRWRpdG9yQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXG5cdH1cblxuXHRjbWVQcm9maWxlRWRpdG9yQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdmaXJlYmFzZVNlcnZpY2UnXTtcblx0XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBjbWVQcm9maWxlRWRpdG9yQ29udHJvbGxlcigkc2NvcGUsICRsb2csIGZpcmViYXNlU2VydmljZSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdFx0c2VsZi5jbWVDb2xsZWN0aW9uID0gZmlyZWJhc2VTZXJ2aWNlLnJlYWQoJ29iamVjdCcsJ2NtZU9iamVjdCcpO1xuXG5cdFx0Ly9kZWZpbmUgdmlldyBtb2RlbCBmdW5jdGlvbnNcblx0XHQvKlxuXHRcdCpcdFVwZGF0ZVxuXHRcdCpcblx0XHQqXHRUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdmFsdWVzIHRoYXQgYXJlIGNoYW5nZWRcblx0XHQqXG5cdFx0Klx0QHBhcmFtIGluZGV4XG5cdFx0Klx0QHBhcmFtIHZhbFxuXHRcdCovXG5cdFx0c2VsZi51cGRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vY29uc29sZS5sb2coc2VsZi5jbWVsaXN0LCBpbmRleCwgdmFsKTtcblx0XHRcdGZpcmViYXNlU2VydmljZS51cGRhdGUoJ29iamVjdCcsICdjbWVPYmplY3QnKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzdWNjZXNzJywgcyk7XG5cdFx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coZSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0RkxBVk9SIE1JWEVSXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBhbGxvdyBjdXN0b21lcnMgdG8gbWl4IGFuZCBtYXRjaFxuKlx0b3VyIGRlbGljaW91cyBmbGF2b3JzIGFuZCB0byBwaWNrIHRoaWVyIHNpemluZy5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnZGF0ZUJvb2tlbmRQaWNrZXInLCBkYXRlQm9va2VuZFBpY2tlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZGF0ZUJvb2tlbmRQaWNrZXIoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2RhdGVCb29rZW5kUGlja2VyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHllYXI6IFwiPVwiLFxuXHRcdFx0Ym9va2VuZDogXCI9XCIsXG5cdFx0XHRia25kdHlwZTogXCI9XCIsXG5cdFx0XHR2YWxpZGF0ZWZuOiBcIiZcIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZGF0ZUJvb2tlbmRQaWNrZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdGRhdGVCb29rZW5kUGlja2VyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gZGF0ZUJvb2tlbmRQaWNrZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRzZWxmLm1vbnRoZGF5cyA9IFtcblx0XHRcdHt0ZXh0OiBcIkphbnVhcnlcIiwgXHR2YWx1ZTogMSwgXHRkYXlzOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzFdfSxcblx0XHRcdHt0ZXh0OiBcIkZlYnJ1YXJ5XCIsIFx0dmFsdWU6IDIsIFx0ZGF5czogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOV19LFxuXHRcdFx0e3RleHQ6IFwiTWFyY2hcIiwgXHR2YWx1ZTogMywgXHRkYXlzOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzFdfSxcblx0XHRcdHt0ZXh0OiBcIkFwcmlsXCIsIFx0dmFsdWU6IDQsIFx0ZGF5czogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzBdfSxcblx0XHRcdHt0ZXh0OiBcIk1heVwiLCBcdFx0dmFsdWU6IDUsIFx0ZGF5czogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxXX0sXG5cdFx0XHR7dGV4dDogXCJKdW5lXCIsIFx0XHR2YWx1ZTogNiwgXHRkYXlzOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMF19LFxuXHRcdFx0e3RleHQ6IFwiSnVseVwiLCBcdFx0dmFsdWU6IDcsIFx0ZGF5czogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxXX0sXG5cdFx0XHR7dGV4dDogXCJBdWd1c3RcIiwgXHR2YWx1ZTogOCwgXHRkYXlzOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzFdfSxcblx0XHRcdHt0ZXh0OiBcIlNlcHRlbWJlclwiLCB2YWx1ZTogOSwgXHRkYXlzOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMF19LFxuXHRcdFx0e3RleHQ6IFwiT2N0b2JlclwiLCBcdHZhbHVlOiAxMCwgXHRkYXlzOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzFdfSxcblx0XHRcdHt0ZXh0OiBcIk5vdmVtYmVyXCIsIFx0dmFsdWU6IDExLCBcdGRheXM6IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAxNiwgMTcsIDE4LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjYsIDI3LCAyOCwgMjksIDMwXX0sXG5cdFx0XHR7dGV4dDogXCJEZWNlbWJlclwiLCBcdHZhbHVlOiAxMiwgXHRkYXlzOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzFdfVxuXHRcdF07XG5cdFx0XG5cdFx0c2VsZi5hY3RpdmVkYXRlID0ge21vbnRoOiBcIlwiLCBkYXk6IFwiXCIsIHdrZGF5OiBcIlwiIH07XG5cdFx0c2VsZi52YWxpZGF0aW9ucyA9IHtcblx0XHRcdG1vbnRoOiBcIlwiLFxuXHRcdFx0ZGF5OiBcIlwiXG5cdFx0fVxuXG5cdFx0Ly9kZWZpbmUgcHJpdmF0ZSBmdW5jdGlvbnNcblx0XHQvKlxuXHRcdCpcdFdlZWtkYXkgQ2FsY3VsYXRpb25cblx0XHQqL1xuXHRcdGZ1bmN0aW9uIHdlZWtkYXlDYWxjdWxhdGlvbigpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGRheXNPZldlZWsgPSBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgIFwiU2F0dXJkYXlcIl07XG5cdFx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZShzZWxmLnllYXIsIHNlbGYuYWN0aXZlZGF0ZS5tb250aCAtIDEsIHNlbGYuYWN0aXZlZGF0ZS5kYXkpO1xuXHRcdFx0dmFyIHdrZGF5TnVtID0gY3VycmVudERhdGUuZ2V0RGF5KCk7XG5cdFx0XHRzZWxmLmFjdGl2ZWRhdGUud2tkYXkgPSBkYXlzT2ZXZWVrW3drZGF5TnVtXTtcblx0XHR9O1xuXG5cdFx0Lypcblx0XHQqXHRTYXZlIEJvb2tlbmRcblx0XHQqL1xuXHRcdGZ1bmN0aW9uIHNhdmVCb29rZW5kKCkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZShzZWxmLnllYXIsIHNlbGYuYWN0aXZlZGF0ZS5tb250aCAtIDEsIHNlbGYuYWN0aXZlZGF0ZS5kYXkpO1xuXHRcdFx0Y29uc29sZS5sb2coJ3NhdmluZyB0aGUgYm9va2VuZCcsIHNlbGYuYmtuZHR5cGUpO1xuXG5cdFx0XHRzZWxmLmJvb2tlbmQgPSBjdXJyZW50RGF0ZTtcblxuXHRcdFx0c2VsZi52YWxpZGF0ZWZuKHt0eXBlOiBzZWxmLmJrbmR0eXBlLCB2YWx1ZTpzZWxmLmJvb2tlbmR9KTtcblx0XHR9O1xuXG5cdFx0Ly9kZWZpbmUgdmlldyBtb2RlbCBmdW5jdGlvbnNcblx0XHRzZWxmLnZhbGlkYXRlID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGlzVGV4dE1vbnRoID0gZmFsc2U7XG5cblx0XHRcdC8vbXVzdCBiZSBhIG51bWJlclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnZm91bmQ6JywgcGFyc2VJbnQodmFsdWUpLCBpc05hTihwYXJzZUludCh2YWx1ZSkpKTtcblxuXHRcdFx0Ly9kZXRlcm1pbmUgaWYgaXQncyBhIHN0cmluZyBvciBhIG51bWJlclxuXHRcdFx0aWYoaXNOYU4ocGFyc2VJbnQodmFsdWUpKSkge1xuXHRcdFx0XHQvL2NhbiB0aGUgc3RyaW5nIGJlIHR1cm5lZCBpbnRvIGEgbnVtYmVyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2NoZWNraW5nIGFsbCBtb250aCBkYXlzJyk7XG5cdFx0XHRcdC8vaXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgdGV4dCBtb250aHMsIGlmIGEgbWF0Y2ggaXMgZm91ZG4gdGhyb3VnaCB0aGUgZmxhZ1xuXHRcdFx0XHRzZWxmLm1vbnRoZGF5cy5mb3JFYWNoKGZ1bmN0aW9uKG1vbnRoKSB7XG5cdFx0XHRcdFx0aWYobW9udGgudGV4dCA9PSB2YWx1ZSkge1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnZm91bmQgdGhlIHRleHQgbW9udGgnKVxuXHRcdFx0XHRcdFx0Ly90aHJvdyB0aGUgZmxhZ1xuXHRcdFx0XHRcdFx0aXNUZXh0TW9udGggPSB0cnVlO1xuXHRcdFx0XHRcdFx0Ly9jaGFuZ2UgdGhlIGRhdGVcblx0XHRcdFx0XHRcdHNlbGYuYWN0aXZlZGF0ZS5tb250aCA9IG1vbnRoLnZhbHVlO1xuXHRcdFx0XHRcdH0gXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKCFpc1RleHRNb250aCkge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ25vIHRleHQgbW9udGggZm91bmQnKTtcblx0XHRcdFx0XHRzZWxmLmFjdGl2ZWRhdGUubW9udGggPSAnJztcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vc2F2ZSB0aGUgSW50IHZlcnNpb24gb2YgdGhlIG51bWJlclxuXHRcdFx0XHRzZWxmLmFjdGl2ZWRhdGVbdHlwZV0gPSBwYXJzZUludCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRcblxuXHRcdFx0Ly9tdXN0IGJlIHdpdGhpbiB0aGUgcmVxdWlyZWQgcmFuZ2Vcblx0XHRcdC8vQUREIFRISVMgTEFURVJcblxuXHRcdFx0aWYoc2VsZi55ZWFyICE9IFwiXCIgJiYgc2VsZi5hY3RpdmVkYXRlLm1vbnRoICE9IFwiXCIgJiYgc2VsZi5hY3RpdmVkYXRlLmRheSAgIT0gXCJcIikge1xuXHRcdFx0XHR3ZWVrZGF5Q2FsY3VsYXRpb24oKTtcblx0XHRcdFx0c2F2ZUJvb2tlbmQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdzdGlsbCBtaXNzaW5nIGRhdGEnKTtcblx0XHRcdH1cblxuXHRcdFx0XG5cdFx0fTtcblxuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0RkxBVk9SIE1JWEVSXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBhbGxvdyBjdXN0b21lcnMgdG8gbWl4IGFuZCBtYXRjaFxuKlx0b3VyIGRlbGljaW91cyBmbGF2b3JzIGFuZCB0byBwaWNrIHRoaWVyIHNpemluZy5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnZmxhdm9yTWl4ZXJTaXplU2VsZWN0b3InLCBmbGF2b3JNaXhlclNpemVTZWxlY3Rvcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZmxhdm9yTWl4ZXJTaXplU2VsZWN0b3IoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2ZsYXZvci1taXhlci1zaXplLXNlbGVjdG9yLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGZsYXZvck1peGVyU2l6ZVNlbGVjdG9yQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRmbGF2b3JNaXhlclNpemVTZWxlY3RvckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGZsYXZvck1peGVyU2l6ZVNlbGVjdG9yQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRGTEFWT1IgTUlYRVJcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIGFsbG93IGN1c3RvbWVycyB0byBtaXggYW5kIG1hdGNoXG4qXHRvdXIgZGVsaWNpb3VzIGZsYXZvcnMgYW5kIHRvIHBpY2sgdGhpZXIgc2l6aW5nLlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCdmbGF2b3JNaXhlcicsIGZsYXZvck1peGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmbGF2b3JNaXhlcigpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZmxhdm9yLW1peGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGZsYXZvck1peGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRmbGF2b3JNaXhlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGZsYXZvck1peGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRGTEFWT1IgTUlYRVJcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIGFsbG93IGN1c3RvbWVycyB0byBtaXggYW5kIG1hdGNoXG4qXHRvdXIgZGVsaWNpb3VzIGZsYXZvcnMgYW5kIHRvIHBpY2sgdGhpZXIgc2l6aW5nLlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCdsb2dpblBhc3N3b3JkJywgbG9naW5QYXNzd29yZCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9naW5QYXNzd29yZCgpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbG9naW4tcGFzc3dvcmQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cGFzc3dvcmQ6IFwiPVwiLFxuXHRcdFx0YWN0aXZlOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9naW5QYXNzd29yZENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0bG9naW5QYXNzd29yZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxvZ2luUGFzc3dvcmRDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59IiwiLypcbipcdEZMQVZPUiBNSVhFUlxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gYWxsb3cgY3VzdG9tZXJzIHRvIG1peCBhbmQgbWF0Y2hcbipcdG91ciBkZWxpY2lvdXMgZmxhdm9ycyBhbmQgdG8gcGljayB0aGllciBzaXppbmcuXG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2NuZScpXG5cdC5kaXJlY3RpdmUoJ2xvZ2luVXNlcm5hbWUnLCBsb2dpblVzZXJuYW1lKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2dpblVzZXJuYW1lKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2dpbi11c2VybmFtZS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHR1c2VybmFtZTogXCI9XCIsXG5cdFx0XHRhY3RpdmU6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2dpblVzZXJuYW1lQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRsb2dpblVzZXJuYW1lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbG9naW5Vc2VybmFtZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0RkxBVk9SIE1JWEVSXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBhbGxvdyBjdXN0b21lcnMgdG8gbWl4IGFuZCBtYXRjaFxuKlx0b3VyIGRlbGljaW91cyBmbGF2b3JzIGFuZCB0byBwaWNrIHRoaWVyIHNpemluZy5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnbG9naW5WYWxpZGF0aW9uJywgbG9naW5WYWxpZGF0aW9uKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2dpblZhbGlkYXRpb24oKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvZ2luLXZhbGlkYXRpb24uZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0YWN0aXZlOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9naW5WYWxpZGF0aW9uQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRsb2dpblZhbGlkYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsb2dpblZhbGlkYXRpb25Db250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuZmFjdG9yeSgnZmlyZWJhc2VGYWN0b3J5JywgZmlyZWJhc2VGYWN0b3J5KTtcblxuZmlyZWJhc2VGYWN0b3J5LiRpbmplY3QgPSBbJyRmaXJlYmFzZScsICckZmlyZWJhc2VPYmplY3QnLCAnJGZpcmViYXNlQXJyYXknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmaXJlYmFzZUZhY3RvcnkoJGZpcmViYXNlLCAkZmlyZWJhc2VPYmplY3QsICRmaXJlYmFzZUFycmF5KSB7XG5cblx0dmFyIEZCID0ge1xuXHRcdHJlZjogZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY21lJyksXG5cdFx0Z2V0T2JqZWN0OiBnZXRPYmplY3QsXG5cdFx0Z2V0QXJyYXk6IGdldEFycmF5XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0T2JqZWN0KCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcblx0fVxuXHRmdW5jdGlvbiBnZXRBcnJheSgpIHt9XG5cbiAgXHQvL2FkZCBcbiAgICByZXR1cm4gRkI7XHRcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuZmFjdG9yeSgnZmlyZWJhc2VTZXJ2aWNlJywgZmlyZWJhc2VTZXJ2aWNlKTtcblxuZmlyZWJhc2VTZXJ2aWNlLiRpbmplY3QgPSBbJyRmaXJlYmFzZScsICckZmlyZWJhc2VPYmplY3QnLCAnJGZpcmViYXNlQXJyYXknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmaXJlYmFzZVNlcnZpY2UoJGZpcmViYXNlLCAkZmlyZWJhc2VPYmplY3QsICRmaXJlYmFzZUFycmF5KSB7XG5cblx0dmFyIEZCID0ge1xuXHRcdF9saXN0czoge1xuXHRcdFx0Y21lTGlzdDogJGZpcmViYXNlQXJyYXkoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY21lJykpXG5cdFx0fSxcblx0XHRfb2JqZWN0czoge1xuXHRcdFx0Y21lT2JqZWN0OiAkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY21lJykpLFxuXHRcdH0sXG5cdFx0Y3JlYXRlOiBjcmVhdGUsXG5cdFx0cmVhZDogcmVhZCxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkZWw6IGRlbFxuXHR9O1xuXG5cdC8qXG5cdCpcdFxuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGUodHlwZSwgbmFtZSwgbmV3RGF0YSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vcmV0dXJuIGFzeW5jIHdvcmtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdC8vZXhlY3V0ZSBiYXNlZCBvbiB0eXBlXG5cdFx0XHRpZih0eXBlID09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL3NhdmUgdGhlIG9iamVjdFxuXHRcdFx0XHRzZWxmLl9vYmplY3RzW25hbWVdLiRzYXZlKCkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdFx0XHRyZXNvbHZlKHMpO1xuXHRcdFx0XHR9LCBmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRcdFx0cmVqZWN0KCdlcnJvcjogJyArIGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHR9IGVsc2UgaWYodHlwZSA9PSAnYXJyYXknKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL3NhdmUgdGhlIGxpc3Rcblx0XHRcdFx0c2VsZi5fbGlzdHNbbmFtZV0uJGFkZChuZXdEYXRhKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0XHRcdHJlc29sdmUocyk7XG5cdFx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdFx0XHRyZWplY3QoJ2Vycm9yOiAnICsgZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdH1cblxuXHRcdH0pO1xuXHRcdFxuXHR9O1xuXG5cdC8qXG5cdCpcblx0Ki9cblx0ZnVuY3Rpb24gcmVhZCh0eXBlLCBuYW1lKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0Ly9leGVjdXRlIGJhc2VkIG9uIHR5cGVcblx0XHRpZih0eXBlID09ICdvYmplY3QnKSByZXR1cm4gc2VsZi5fb2JqZWN0c1tuYW1lXTtcblx0XHRlbHNlIGlmKHR5cGUgPT0gJ2FycmF5JykgcmV0dXJuIHNlbGYuX2xpc3RzW25hbWVdO1xuXHR9O1xuXG5cdC8qXG5cdCpcblx0Ki9cblx0ZnVuY3Rpb24gdXBkYXRlKHR5cGUsIG5hbWUsIG5ld0RhdGEpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHQvL3JldHVybiBhc3luYyB3b3JrXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQvL2V4ZWN1dGUgYmFzZWQgb24gdHlwZVxuXHRcdFx0aWYodHlwZSA9PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9zYXZlIHRoZSBvYmplY3Rcblx0XHRcdFx0c2VsZi5fb2JqZWN0c1tuYW1lXS4kc2F2ZSgpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShzKTtcblx0XHRcdFx0fSwgZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0XHRcdHJlamVjdCgnZXJyb3I6ICcgKyBlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIGlmKHR5cGUgPT0gJ2FycmF5Jykge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9zYXZlIHRoZSBsaXN0XG5cdFx0XHRcdHNlbGYuX2xpc3RzW25hbWVdLiRhZGQobmV3RGF0YSkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdFx0XHRyZXNvbHZlKHMpO1xuXHRcdFx0XHR9LCBmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRcdFx0cmVqZWN0KCdlcnJvcjogJyArIGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHR9O1xuXG5cdC8qXG5cdCpcblx0Ki9cblx0ZnVuY3Rpb24gZGVsKCkge307XG5cbiAgXHQvL2FkZCBcbiAgICByZXR1cm4gRkI7XHRcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuZmFjdG9yeSgnc2NoZW1hRmFjdG9yeScsIHNjaGVtYUZhY3RvcnkpO1xuXG5zY2hlbWFGYWN0b3J5LiRpbmplY3QgPSBbXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzY2hlbWFGYWN0b3J5KCkge1xuXG5cdHZhciBhbGxTY2hlbWEgPSB7XG5cdFx0bmV3V2ViU29jaWFsOiBuZXdXZWJTb2NpYWwsXG5cdFx0bmV3Q29udGFjdDogbmV3Q29udGFjdCxcblx0XHRuZXdBZGRyZXNzOiBuZXdBZGRyZXNzLFxuXHRcdG5ld0NNRTogbmV3Q01FXG5cdH07XG5cblx0ZnVuY3Rpb24gbmV3V2ViU29jaWFsKCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiB7XHRcdC8vZW1haWwsIHBob25lLCB3ZWIsIGluc3RhZ3JhbSwgZmFjZWJvb2ssIHR3aXR0ZXIsIHNuYXAsIHBpbnRlcmVzdCwgb3RoZXJcblx0XHRcdFx0c2VsZWN0aW9uOiBcIlwiLFxuXHRcdFx0XHRvdGhlckRlc2NyaXB0aW9uOiBcIlwiXG5cdFx0XHR9LFxuXHRcdFx0YWRkcmVzczogXCJcIlxuXHRcdH07XG5cblx0fTtcblxuXHRmdW5jdGlvbiBuZXdDb250YWN0KCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHJldHVybiB7XG5cdFx0XHRuYW1lOiB7XG5cdFx0XHRcdGZpcnN0OiBcIlwiLFxuXHRcdFx0XHRsYXN0OiBcIlwiLFxuXHRcdFx0fSxcblx0XHRcdHBob25lOiBcIlwiLFxuXHRcdFx0ZW1haWw6IFwiXCIsXG5cdFx0XHR0eXBlOiB7XG5cdFx0XHRcdHNlbGVjdGlvbjogXCJcIixcblx0XHRcdFx0b3RoZXJEZXNjcmlwdGlvbjogXCJcIlxuXHRcdFx0fVxuXHRcdH07XG5cblx0fTtcblxuXHRmdW5jdGlvbiBuZXdBZGRyZXNzKCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiB7XG5cdFx0XHRcdHNlbGVjdGlvbjogXCJcIixcblx0XHRcdFx0b3RoZXJEZXNjcmlwdGlvbjogXCJcIlxuXHRcdFx0fSxcblx0XHRcdHBoeXNpY2FsOiB7XG5cdFx0XHRcdHN0cmVldDAxOiBcIlwiLFxuXHRcdFx0XHRzdHJlZXQwMjogXCJcIixcblx0XHRcdFx0c3RyZWV0MDM6IFwiXCIsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBcIlwiLFxuXHRcdFx0XHRjaXR5OiBcIlwiLFxuXHRcdFx0XHRzdGF0ZTogXCJcIixcblx0XHRcdFx0emlwOiBcIlwiXG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHRmdW5jdGlvbiBuZXdDTUUoKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGdlbmVyYWw6IHtcblx0XHRcdFx0dGl0bGU6IFwiXCIsXG5cdFx0XHRcdHR5cGU6IHtcblx0XHRcdFx0XHRzZWxlY3Rpb246IFwiXCIsXG5cdFx0XHRcdFx0b3RoZXJEZXNjcmlwdGlvbjogXCJcIlxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YWRkcmVzczogWyBzZWxmLm5ld0FkZHJlc3MoKSBdLFxuXHRcdFx0Y29udGFjdHM6IHtcblx0XHRcdFx0cGVvcGxlOiBbIHNlbGYubmV3Q29udGFjdCgpIF0sXG5cdFx0XHRcdHNvY2lhbDogWyBzZWxmLm5ld1dlYlNvY2lhbCgpIF1cblx0XHRcdH0sXG5cdFx0XHRmaW5hbmNpYWxzOiB7XG5cdFx0XHRcdGdyb3NzOiBcIlwiLFxuXHRcdFx0XHRhbm51YWxzOiBbXSxcblx0XHRcdFx0bW9udGhseTogW11cblx0XHRcdH0sXG5cdFx0XHRvY2N1cmFuY2VzOiB7fVxuXHRcdH1cblx0fVxuIFxuICAgIHJldHVybiBhbGxTY2hlbWE7XHRcbn0iLCIvKlxuKlx0Uk9VVEVTLUNPTkZJR1xuKlxuKlx0VGhpcyBtb2R1bGUgc2V0cyB1cCBhbGwgdGhlIHJlcXVpcmVkIGFuZ3VsYXIgcm91dGVzIGZvciB0aGlzIHdlYiBhcHAuXG4qL1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbmZpZyhjb25maWcpO1xuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIpIHtcblx0JGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnJyk7XG4gICAgJHJvdXRlUHJvdmlkZXJcblx0Ly9QVUJMSUMgUk9VVEVTXG4gICAgLndoZW4oJy8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbGFuZGluZ1BhZ2UuaHRtJywgICAgICAvLyd2aWV3cy9tYWluUGFnZS5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsYW5kaW5nQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2ZvcmdvdFBhc3N3b3JkJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luLWZvcmdvdFBhc3N3b3JkUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2ZvcmdvdFBhc3N3b3JkQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2NyZWF0ZUxvZ2luJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luLWNyZWF0ZUxvZ2luUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2NyZWF0ZUxvZ2luQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2ZpbmQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbG9jYXRpb25zUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2xvY2F0aW9uc0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9zaG9wJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3Nob3BwaW5nUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ3Nob3BwaW5nQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcblxuICAgIC8vUFJJVkFURSBST1VURVNcbiAgICAud2hlbignL3RlYW1NZW1iZXIvOmVtcGxveWVlSWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdGVhbW1lbWJlckRhc2hib2FyZC5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ3RlYW1tZW1iZXJEYXNoYm9hcmRDb250cm9sbGVyJywgICAgICAgICAgIC8vJ21haW5Db250cm9sbGVyJ1xuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvbjogYXV0aGVudGljYXRpb25cbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy90ZWFtTWVtYmVyL2NtZW1hbmFnZXIvOmVtcGxveWVlSWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY21lbWFuYWdlci5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2NtZU1hbmFnZXJDb250cm9sbGVyJywgICAgICAgICAgIC8vJ21haW5Db250cm9sbGVyJ1xuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvbjogYXV0aGVudGljYXRpb25cbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9teUFjY291bnQvOnVzZXJJZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jdXN0b21lckRhc2hib2FyZC5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2N1c3RvbWVyRGFzaGJvYXJkQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgYXV0aGVudGljYXRpb246IGF1dGhlbnRpY2F0aW9uXG4gICAgICAgIH1cbiAgICB9KVxuXHQub3RoZXJ3aXNlKHtcbiAgICAgICAgcmVkaXJlY3RUbzogJy8nXG4gICAgfSk7XG59XG5cbi8qXG4qICAgUkVRVUlSRUQgRlVOQ1RJT05TXG4qXG4qL1xuZnVuY3Rpb24gYXV0aGVudGljYXRpb24oKSB7XG5cbiAgICBjb25zb2xlLmxvZygnYXV0aGVudGljYXRpbmcnKTsgIC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxufTsiXX0=
