config.$inject=["$routeProvider"];var ahNuts=angular.module("cne",["ngRoute"]);angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"];function landingController(e,o){o.info("in the landing controller")}angular.module("cne").controller("locationsController",locationsController),locationsController.$inject=["$scope","$log"];function locationsController(e,o){o.info("in the locations controller")}angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log"];function loginController(e,o){this.username="",this.password="",this.active={username:!1,password:!1},o.info("in the login controller")}angular.module("cne").controller("createLoginController",createLoginController),createLoginController.$inject=["$scope","$log"];function createLoginController(e,o){o.info("in the login-createLogin controller")}angular.module("cne").controller("forgotPasswordController",forgotPasswordController),forgotPasswordController.$inject=["$scope","$log"];function forgotPasswordController(e,o){o.info("in the login-forgot Password controller")}angular.module("cne").controller("teammemberDashboardController",teammemberDashboardController),teammemberDashboardController.$inject=["$scope","$log"];function teammemberDashboardController(e,o){this.sampleRecords=[{testing:"test",instances:[1,2,3]},{testing2:"test2"}],o.info("in the teammemberDashboard controller")}angular.module("cne").directive("cmeIterationsTable",cmeIterationsTable);function cmeIterationsTable(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeIterationsTable.directive.htm",replace:!0,scope:{instances:"="},link:o,controller:r,controllerAs:"vm",bindToController:!0};function o(e,o,r,t){}r.$inject=["$scope","$log"];function r(e,o){console.log("got these instances",this.instances)}return e}angular.module("cne").directive("cmeProfileEditor",cmeProfileEditor);function cmeProfileEditor(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/cmeProfileEditor.directive.htm",replace:!0,scope:{record:"="},link:o,controller:r,controllerAs:"vm",bindToController:!0};function o(e,o,r,t){}r.$inject=["$scope","$log"];function r(e,o){console.log("got this record",this.record)}return e}angular.module("cne").directive("flavorMixerSizeSelector",flavorMixerSizeSelector);function flavorMixerSizeSelector(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer-size-selector.directive.htm",replace:!0,scope:{},link:o,controller:r,controllerAs:"vm",bindToController:!0};function o(e,o,r,t){}r.$inject=["$scope","$log"];function r(e,o){}return e}angular.module("cne").directive("flavorMixer",flavorMixer);function flavorMixer(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/flavor-mixer.directive.htm",replace:!0,scope:{},link:o,controller:r,controllerAs:"vm",bindToController:!0};function o(e,o,r,t){}r.$inject=["$scope","$log"];function r(e,o){}return e}angular.module("cne").directive("loginPassword",loginPassword);function loginPassword(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:o,controller:r,controllerAs:"vm",bindToController:!0};function o(e,o,r,t){}r.$inject=["$scope","$log"];function r(e,o){}return e}angular.module("cne").directive("loginUsername",loginUsername);function loginUsername(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:o,controller:r,controllerAs:"vm",bindToController:!0};function o(e,o,r,t){}r.$inject=["$scope","$log"];function r(e,o){}return e}angular.module("cne").directive("loginValidation",loginValidation);function loginValidation(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-validation.directive.htm",replace:!0,scope:{active:"="},link:o,controller:r,controllerAs:"vm",bindToController:!0};function o(e,o,r,t){}r.$inject=["$scope","$log"];function r(e,o){}return e}angular.module("cne").config(config);function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/forgotPassword",{templateUrl:"views/login-forgotPasswordPage.htm",controller:"forgotPasswordController",controllerAs:"vm"}).when("/createLogin",{templateUrl:"views/login-createLoginPage.htm",controller:"createLoginController",controllerAs:"vm"}).when("/find",{templateUrl:"views/locationsPage.htm",controller:"locationsController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shoppingPage.htm",controller:"shoppingController",controllerAs:"vm"}).when("/teamMember/:employeeId",{templateUrl:"views/teammemberDashboard.htm",controller:"teammemberDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).when("/myAccount/:userId",{templateUrl:"views/customerDashboard.htm",controller:"customerDashboardController",controllerAs:"vm",resolve:{authentication:authentication}}).otherwise({redirectTo:"/"})}function authentication(){console.log("authenticating")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
